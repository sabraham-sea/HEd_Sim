fluidRow(
column(2,offset=200,actionButton("Submit4", "Add constraints")),
),
#    actionButton("add_btn", "Add Constraints"),
#    # actionButton("rm_btn", "Remove Textbox"),
#    textOutput("counter")
#
# ,
numericInput(
inputId = "currrev",
label = "Current Revenue",
min = 0,
max = 1000000,
value = ''
),
numericInput(
inputId = "revised_rev",
label = "Revised Revenue",
min = 0,
max = 1000000,
value = ''
),
tableOutput("out3"),
# checkboxInput("checkbox", label = "Choice A", value = TRUE)
)
))
# Define server logic required to output ggplot from helper function
server <- function(input, output, session) {
plot_List <- eventReactive(input$Submit1, {
print("ran")
Helper(input$Partner)
})
#Output the plot
output$plot <- renderPlot({
plot = plot_List()
plot[[1]]
})
# number1<-eventReactive(input$Submit2, {
#   print("captolist")
#   captolist(input$capfrom)  # value 2
#
# })
output$x3 = DT::renderDataTable(captolist(input$capfrom))
# print the selected indices
output$x4 = renderPrint({
s = input$x3_rows_selected
if (length(s)) {
cat('These rows were selected:\n\n')
cat(s, sep = ', ')
}
})
editable_dt <- callModule(modDt,"editable", data = captolist(input$capfrom))
})
output$out1<- renderTable({
nbr = number1()
nbr[,]})
number2<-eventReactive(input$Submit2, {
capcurrent(input$capfrom)  # value 2
})
observeEvent(input$Submit2, {
updateTextInput(session, "capfrombudget1", value=paste(prettyNum(number2())))
print("cafrombudg")
})
observeEvent(input$Submit2, {
name<-capcurrentcnt(input$capfrom)
updateTextInput(session, "capfromcnt", value=paste(prettyNum(name)))
print("cafromcnt")
})
observeEvent(input$Submit2, {
name<-sumcurrrev(input$capfrom)
updateTextInput(session, "currrev", value=paste(prettyNum(name)))
print("caprev")
})
# updateTextInput(session, "capfrombudget1", value = paste(number2))
number3<- eventReactive(input$Submit3, {
delta_lead(input$capfrom,input$capfrombudget2)  # value 2
})
observeEvent(input$Submit3 , {
updateTextInput(session, "capfromnewcnt", value=paste(prettyNum(number3())))
print("capnewcnt")
})
number4<-eventReactive(input$Submit4, {
get_return(input$capfrom,input$capfrombudget2)
})
observeEvent(input$Submit4, {
updateTextInput(session, "revised_rev", value=paste(prettyNum(number4())))
print("capret")
})
# data_df_final <- reactiveValues()
# observe(
#   {data_df_final$data <- edited$data}
# )
# observe(print(data_df_final$data))
number5<-eventReactive(input$Submit3, {
get_final(input$capfrom,input$capfrombudget2)
})
output$out3<- renderTable({
nbr = number5()
nbr[,]})
# renderPrint({ input$checkbox })
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
library(shiny)
library(DT)
shinyApp(
ui = fluidPage(
DTOutput('x1'),
verbatimTextOutput("print")
),
server = function(input, output, session) {
dat <- reactiveVal(cbind(iris, Date = Sys.time() + seq_len(nrow(iris))))
output$x1 = renderDT(isolate(dat()), selection = 'none', editable = TRUE)
proxy = dataTableProxy('x1')
observeEvent(input$x1_cell_edit, {
info = input$x1_cell_edit
dat(editData(dat(), info, proxy, resetPaging = FALSE))
})
output$print <- renderPrint({
dat()
})
}
)
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
library(shiny)
library(DT)
shinyApp(
ui = fluidPage(
DTOutput('x1'),
verbatimTextOutput("print")
),
server = function(input, output, session) {
dat <- reactiveVal(cbind(iris, Date = Sys.time() + seq_len(nrow(iris))))
output$x1 = renderDT(isolate(dat()), selection = 'none', editable = TRUE)
proxy = dataTableProxy('x1')
observeEvent(input$x1_cell_edit, {
info = input$x1_cell_edit
dat(editData(dat(), info, proxy, resetPaging = FALSE))
})
output$print <- renderPrint({
dat()
})
}
)
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
?reactiveVal
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
library(shiny)
library(DT)
ui <- function() {
TheModuleUI("module")
}
server <- function(input, output, session) {
callModule(TheModule, "module")
}
TheModuleUI <- function(id) {
ns <- NS(id)
fluidPage(
DT::dataTableOutput(ns("table")),
actionButton(ns("change"), "change first row")
)
}
TheModule <- function(input, output, session) {
data <- reactiveValues(df = data.frame(x = c(1,2), y=c('a','b'), stringsAsFactors = FALSE))
output$table <- DT::renderDataTable({ DT::datatable(data = isolate(data$df)) })
proxy <- DT::dataTableProxy("table")
observeEvent(input$change, { data$df[1, "y"] <- 'changed' })
observe({ DT::replaceData(proxy, data$df) })
}
shiny::shinyApp(ui = ui, server = server)
data <- reactiveValues(df = data.frame(captolist(input$capfrom), stringsAsFactors = FALSE))
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
dat <- reactiveVal(cbind(iris, Date = Sys.time() + seq_len(nrow(iris))))
library(shiny)
library(DT)
shinyApp(
ui = fluidPage(
DTOutput('x1'),
verbatimTextOutput("print")
),
server = function(input, output, session) {
dat <- reactiveVal(cbind(iris, Date = Sys.time() + seq_len(nrow(iris))))
output$x1 = renderDT(isolate(dat()), selection = 'none', editable = TRUE)
proxy = dataTableProxy('x1')
observeEvent(input$x1_cell_edit, {
info = input$x1_cell_edit
dat(editData(dat(), info, proxy, resetPaging = FALSE))
})
output$print <- renderPrint({
dat()
})
}
)
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
shiny::runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
editData()
?editData()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
require(shinyalert)
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
install.packages(shinyalert)
install.packages("shinyalert")
require(shinyalert)
runApp('~/Documents/Github/Rshiny/newtest/test')
note <- readRDS("~/Documents/Github/Rshiny/newtest/test/note.rds")
View(note)
runApp('~/Documents/Github/Rshiny/newtest/test')
note <- readRDS("~/Documents/Github/Rshiny/newtest/test/note.rds")
View(note)
runApp('~/Documents/Github/Rshiny/newtest/test')
note <- readRDS("~/Documents/Github/Rshiny/newtest/test/note.rds")
note <- readRDS("~/Documents/Github/Rshiny/newtest/test/note.rds")
note
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
note <- readRDS("~/Documents/Github/Rshiny/newtest/test/note.rds")
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
?editData
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
?editData
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
#--------------------------------
df <- data.frame("country" =c("Russia", "China", "US", "India", "UK" )
, "tv_cost" = c(43, 67, 78, 56, 78 )
, "fridge_cost" = c(78, 45, 56, 78, 47)
, "microwave" = c(44, 23,31,29, 34)
)
#Shiny Dashboard
ui <- dashboardPage(skin = "green"
, dashboardHeader(title = "Edit Table")
, dashboardSidebar(sidebarMenu(menuItem("Edit Data", tabName = "tab_01" )
, menuItem("Output", tabName = "tab_02")
, menuItem("Input", tabName = "tab_03")
))
, dashboardBody(tabItems(tabItem(tabName = "tab_01"
, selectInput(inputId = "countryid", label = "SELECT COUNTRY" , choices = df$country )
, DT::dataTableOutput("table1"))
, tabItem(tabName = "tab_02", DT::dataTableOutput("table2"))
, tabItem(tabName = "tab_03", DT::dataTableOutput("table3"))
))
)#dashboardpage ends here
server <- function(input, output, session){
vals <- reactiveValues(data = df, edited = df)
output$table1 <-  DT::renderDataTable(DT::datatable(filter(vals$edited, country == input$countryid), editable = TRUE))
observe(
{
req(input$table1_cell_edit)
vals$edited[which(vals$edited$country == input$countryid), input$table1_cell_edit$col] <- input$table1_cell_edit$value
}
)
#Rendering overall edited df.
output$table2 <- DT::renderDataTable(DT::datatable(vals$edited))
#input file
output$table3 <- DT::renderDataTable(DT::datatable(vals$data))
}
shinyApp(ui, server)
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
View(df)
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
shiny::runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
library(shiny)
library(shinydashboard)
#--------------------------------
df <- data.frame("country" =c("Russia", "China", "US", "India", "UK" )
, "tv_cost" = c(43, 67, 78, 56, 78 )
, "fridge_cost" = c(78, 45, 56, 78, 47)
, "microwave" = c(44, 23,31,29, 34)
)
#Shiny Dashboard
ui <- dashboardPage(skin = "green"
, dashboardHeader(title = "Edit Table")
, dashboardSidebar(sidebarMenu(menuItem("Edit Data", tabName = "tab_01" )
, menuItem("Output", tabName = "tab_02")
, menuItem("Input", tabName = "tab_03")
))
, dashboardBody(tabItems(tabItem(tabName = "tab_01"
, selectInput(inputId = "countryid", label = "SELECT COUNTRY" , choices = df$country )
, DT::dataTableOutput("table1"))
, tabItem(tabName = "tab_02", DT::dataTableOutput("table2"))
, tabItem(tabName = "tab_03", DT::dataTableOutput("table3"))
))
)#dashboardpage ends here
server <- function(input, output, session){
vals <- reactiveValues(data = df, edited = df)
output$table1 <-  DT::renderDataTable(DT::datatable(filter(vals$edited, country == input$countryid), editable = TRUE))
observe(
{
req(input$table1_cell_edit)
vals$edited[which(vals$edited$country == input$countryid), input$table1_cell_edit$col] <- input$table1_cell_edit$value
}
)
#Rendering overall edited df.
output$table2 <- DT::renderDataTable(DT::datatable(vals$edited))
#input file
output$table3 <- DT::renderDataTable(DT::datatable(vals$data))
}
shinyApp(ui, server)
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
?DT::editData()
input$x5
d5<-captolist(input$capfrom)%>%as.data.frame()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
?renderDataTable
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
t <- readRDS("~/Documents/Github/Rshiny/newtest/test/t.RDS")
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
t <- readRDS("~/Documents/Github/Rshiny/newtest/test/t.RDS")
t
runApp('~/Documents/Github/Rshiny/newtest/test')
t <- readRDS("~/Documents/Github/Rshiny/newtest/test/t.RDS")
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp()
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
runApp('~/Documents/Github/Rshiny/newtest/test')
