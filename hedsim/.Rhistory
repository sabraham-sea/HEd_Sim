setwd("~/Documents/Github/Rshiny/newtest/test")
`%not_in%` = Negate(`%in%`)
cap_school_degree<-readRDS('cap_school_degree.RDS')
final_list<-readRDS('final_list.RDS')
cap_list<-inner_join(cap_school_list,final_list,by='cap_id')
cap_school_list<-cap_school_degree%>%ungroup()%>%select(cap_id,clusno)%>%distinct()
cap_list<-inner_join(cap_school_list,final_list,by='cap_id')
shiny::runApp()
runApp()
`%not_in%` = Negate(`%in%`)
cap_school_degree<-readRDS('cap_school_degree.RDS')
final_list<-readRDS('final_list.RDS')
cap_list<-inner_join(cap_school_list,final_list,by='cap_id')
View(cap_school_degree)
cap_list<-inner_join(cap_school_degree,final_list,by='cap_id')
cap_school_list<-cap_school_degree%>%ungroup()%>%select(cap_id,clusno)%>%distinct()
cap_list<-inner_join(cap_school_list,final_list,by='cap_id')
View(cap_list)
View(cap_list)
billable_leadrevenue_AM<-readRDS('cpl_Junepred.RDS')
billable_leadrevenue_AM<-readRDS('cpl_Junepred.RDS')
indat<-billable_leadrevenue_AM%>%filter(lastname==partner)
Plot=ggplot(data=indat,mapping=aes(x=cap_id, y=forcast_billable))+geom_col(fill = "grey50", colour = "black")
runApp()
View(billable_leadrevenue_AM)
runApp()
runApp()
runApp()
runApp()
runApp()
capid<-3143
View(billable_leadrevenue_AM)
runApp()
finalbillable<-661367.8
dat<-billable_leadrevenue%>%filter(cap_id==capid)
billable_leadrevenue_AM<-readRDS('cpl_Junepred.RDS')
dat<-billable_leadrevenue%>%filter(cap_id==capid)
billable_leadrevenue<-readRDS('cpl_Junepred.RDS')
dat<-billable_leadrevenue%>%filter(cap_id==capid)
revdiff<-dat$forcast_billable-finalbillable
billable_leadrevenue<-readRDS('cpl_Junepred.RDS')
finalbillable<-500000
billable_leadrevenue<-readRDS('cpl_Junepred.RDS')
dat<-billable_leadrevenue%>%filter(cap_id==capid)
View(dat)
revdiff<-dat$forcast_billable-finalbillable
revdiff/dat$accepted_revenue
View(dat)
leaddiff=revdiff/dat$accepted_revenue
newlead<-dat$forcast -leaddiff
newimp<-newlead/(avg_ctr*avg_cr)
newimp<-newlead/(dat$avg_ctr*dat$avg_cr)
View(dat)
runApp()
runApp()
runApp()
runApp()
runApp()
}
plot[[1]]
# Define server logic required to output ggplot from helper function
server <- function(input, output, session) {
plot_List <- eventReactive(input$Submit, {
print("ran")
Helper(input$Partner)
})
#Output the plot
output$plot <- renderPlot({
plot = plot_List()
plot[[1]]
})
}
ui <- fluidPage(titlePanel("VALAT"),
tabsetPanel(
tabPanel(title = "FORECAST",
sidebarLayout(
sidebarPanel(
selectInput(
"Partner",
h3("Partner"),
choices = list(
"Murphy",
"Quinn",
"Streeter" ,
"Dent" ,
"Malisos" ,
"Lamach"  ,
"Saintval"
),
selected = "Saintval"
),
actionButton("Submit", "Submit"),
h3("")
),
mainPanel(plotOutput("plot"))
))
#
# tabPanel(
#   title = "REALLOCATION",
#   splitLayout( numericInput(
#     inputId = "capfrom",
#     label = "Input capid",
#     value=3143,
#     min = 1,
#     max = 10000),
#
#     numericInput(
#       inputId = "capfrombudget1",
#       label = "Current budget",
#       min = 0,
#       max = 1000000,
#       value = ''
#     ),
#
#     numericInput(
#       inputId = "capfrombudget2",
#       label = "Final budget",
#       min = 0,
#       max = 1000000,
#       value = ''
#     )),
#
#   actionButton(inputId = "submit2",
#                label = "Submit"),
#   tableOutput("out1"),
#   textOutput("out2")
#
# )
#
))
ui <- fluidPage(titlePanel("VALAT"),
tabsetPanel(
tabPanel(title = "FORECAST",
sidebarLayout(
sidebarPanel(
selectInput(
"Partner",
h3("Partner"),
choices = list(
"Murphy",
"Quinn",
"Streeter" ,
"Dent" ,
"Malisos" ,
"Lamach"  ,
"Saintval"
),
selected = "Saintval"
),
actionButton("Submit", "Submit"),
h3("")
),
mainPanel(plotOutput("plot"))
))
#
# tabPanel(
#   title = "REALLOCATION",
#   splitLayout( numericInput(
#     inputId = "capfrom",
#     label = "Input capid",
#     value=3143,
#     min = 1,
#     max = 10000),
#
#     numericInput(
#       inputId = "capfrombudget1",
#       label = "Current budget",
#       min = 0,
#       max = 1000000,
#       value = ''
#     ),
#
#     numericInput(
#       inputId = "capfrombudget2",
#       label = "Final budget",
#       min = 0,
#       max = 1000000,
#       value = ''
#     )),
#
#   actionButton(inputId = "submit2",
#                label = "Submit"),
#   tableOutput("out1"),
#   textOutput("out2")
#
# )
#
)
))
ui <- fluidPage(titlePanel("VALAT"),
tabsetPanel(
tabPanel(title = "FORECAST",
sidebarLayout(
sidebarPanel(
selectInput(
"Partner",
h3("Partner"),
choices = list(
"Murphy",
"Quinn",
"Streeter" ,
"Dent" ,
"Malisos" ,
"Lamach"  ,
"Saintval"
),
selected = "Saintval"
),
actionButton("Submit", "Submit"),
h3("")
),
mainPanel(plotOutput("plot"))
))
#
# tabPanel(
#   title = "REALLOCATION",
#   splitLayout( numericInput(
#     inputId = "capfrom",
#     label = "Input capid",
#     value=3143,
#     min = 1,
#     max = 10000),
#
#     numericInput(
#       inputId = "capfrombudget1",
#       label = "Current budget",
#       min = 0,
#       max = 1000000,
#       value = ''
#     ),
#
#     numericInput(
#       inputId = "capfrombudget2",
#       label = "Final budget",
#       min = 0,
#       max = 1000000,
#       value = ''
#     )),
#
#   actionButton(inputId = "submit2",
#                label = "Submit"),
#   tableOutput("out1"),
#   textOutput("out2")
#
# )
#
)
)
# Define server logic required to output ggplot from helper function
server <- function(input, output, session) {
plot_List <- eventReactive(input$Submit, {
print("ran")
Helper(input$Partner)
})
#Output the plot
output$plot <- renderPlot({
plot = plot_List()
plot[[1]]
})
}
ui <- fluidPage(titlePanel("VALAT"),
tabsetPanel(
tabPanel(title = "FORECAST",
sidebarLayout(
sidebarPanel(
selectInput(
"Partner",
h3("Partner"),
choices = list(
"Murphy",
"Quinn",
"Streeter" ,
"Dent" ,
"Malisos" ,
"Lamach"  ,
"Saintval"
),
selected = "Saintval"
),
actionButton("Submit", "Submit"),
h3("")
),
mainPanel(plotOutput("plot"))
)),
tabPanel(
title = "REALLOCATION",
splitLayout(
numericInput(
inputId = "capfrom",
label = "Input capid",
value = 3143,
min = 1,
max = 10000
),
numericInput(
inputId = "capfrombudget1",
label = "Current budget",
min = 0,
max = 1000000,
value = ''
),
numericInput(
inputId = "capfrombudget2",
label = "Final budget",
min = 0,
max = 1000000,
value = ''
)
),
actionButton(inputId = "submit2",
label = "Submit"),
tableOutput("out1"),
textOutput("out2")
)
))
ui <- fluidPage(titlePanel("VALAT"),
tabsetPanel(
tabPanel(title = "FORECAST",
sidebarLayout(
sidebarPanel(
selectInput(
"Partner",
h3("Partner"),
choices = list(
"Murphy",
"Quinn",
"Streeter" ,
"Dent" ,
"Malisos" ,
"Lamach"  ,
"Saintval"
),
selected = "Saintval"
),
actionButton("Submit", "Submit"),
h3("")
),
mainPanel(plotOutput("plot"))
)),
tabPanel(
title = "REALLOCATION",
splitLayout(
numericInput(
inputId = "capfrom",
label = "Input capid",
value = 3143,
min = 1,
max = 10000
),
numericInput(
inputId = "capfrombudget1",
label = "Current budget",
min = 0,
max = 1000000,
value = ''
),
numericInput(
inputId = "capfrombudget2",
label = "Final budget",
min = 0,
max = 1000000,
value = ''
)
),
actionButton(inputId = "submit2",
label = "Submit"),
tableOutput("out1"),
textOutput("out2")
))
))
setwd("~/Documents/Github/HEd_Sim/hedsim/julyrun")
setwd("~/Documents/Github/HEd_Sim/hedsim")
Combined_Cluster <- readRDS("~/Documents/Github/HEd_Sim/hedsim/Combined_Cluster.RDS")
`%not_in%` = Negate(`%in%`)
capfrom<-'3143'
# Find which cluster capfrom belongs to
clustno<-Combined_Cluster%>%filter(cap_id ==capfrom)%>%select(clusno)
# Find other capids in same cluster
capto<-Combined_Cluster%>%filter(clusno==clustno$clusno)%>%select(cap_id)%>%filter(cap_id %not_in% capfrom)
require(dplyr)
`%not_in%` = Negate(`%in%`)
capfrom<-'3143'
# Find which cluster capfrom belongs to
clustno<-Combined_Cluster%>%filter(cap_id ==capfrom)%>%select(clusno)
# Find other capids in same cluster
capto<-Combined_Cluster%>%filter(clusno==clustno$clusno)%>%select(cap_id)%>%filter(cap_id %not_in% capfrom)
