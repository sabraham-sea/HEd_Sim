datechk<-'2020-04-30'
period_rng<-31
system.time(forcast_leads <- parLapply(cl,cc$cap_id,pred_forecast,datechk,period_rng))
stopCluster(cl)
### Multiply by CPL
forcast_leads1<-forcast_leads%>%unlist()%>%as.data.frame()%>%rename(forcast= ".")
forcast_leads1<-cbind(forcast_leads1,cc)
pricelist<-trf_daily_clean%>%select(cap_id,accepted_revenue,billable_revenue,revised_revenue,date)%>%filter(date=='2020-04-01' & accepted_revenue>0)%>%distinct()
billable_leadrevenue<-left_join(forcast_leads1,pricelist,by="cap_id")%>%mutate(forcast_billable=forcast*accepted_revenue)%>%filter(!is.na(accepted_revenue))
trf_daily_final<-readRDS('trf_daily_final.RDS')
trf_daily_clean<-trf_daily_final%>%mutate_at(c(12,14,16), ~replace(., is.na(.), 0))
cap_data_daily<-trf_daily_clean%>%dplyr::select(cap_id, school_name,date,accepted_cpl_leads,accepted_cpl_appviews,accepted_cpc_clicks,accepted_cpc_leads,
accepted_revenue,billable_revenue,revised_revenue,
`daily_new$combined_daily.dcs_traffic`)%>%
filter(date <= '2020-04-30' )%>%group_by(cap_id, school_name,date)%>%
summarize(cpl_leads=sum(accepted_cpl_leads),cpl_views=sum(accepted_cpl_appviews),cpc_clicks=sum(accepted_cpc_clicks),
cpc_leads=sum(accepted_cpc_leads),imptrf=sum(`daily_new$combined_daily.dcs_traffic`))%>%filter(!is.na(cap_id))
pricelist<-trf_daily_clean%>%select(cap_id,accepted_revenue,billable_revenue,revised_revenue,date)%>%filter(date=='2020-04-01' & accepted_revenue>0)%>%distinct()
caplist<-trf_daily_clean%>%filter(!is.na(cap_id) & date >= '2020-01-01' )%>%dplyr::select(cap_id)%>%distinct()%>%as.data.frame()
cc<-head(caplist,n=5)%>%as.data.frame()
datechk<-'2020-04-30'
period_rng<-31
library(doParallel)
no_cores <- detectCores() - 1
registerDoParallel(cores=no_cores)
cl <- makeCluster(no_cores, type="FORK")
clusterExport(cl,list('cc','cap_data_daily','datechk','period_rng'), envir = environment())
datechk<-'2020-04-30'
period_rng<-31
system.time(forcast_leads <- parLapply(cl,cc$cap_id,pred_forecast,datechk,period_rng))
stopCluster(cl)
pred_forecast<-function(capid,datechk,period_rng)
{
set.seed(1234)
# Make traffic forecasts
cap_traffic<-cap_data_daily%>%filter(cap_id==capid)%>%
filter(date <= datechk )%>%
rename(y=imptrf, ds=date)
# Make traffic forecasts
trf_prf <- prophet(cap_traffic, daily.seasonality='auto', weekly.seasonality='auto', mcmc.samples = 1000,interval.width = 0.80)
trf_daily <- make_future_dataframe(trf_prf , periods = period_rng,freq="day")
trf_daily_forecast <- predict(trf_prf, trf_daily)
# tail(trf_daily_forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
# plot(trf_prf, trf_daily_forecast)
# Make appview forecasts
cap_views<-cap_data_daily%>%
filter(cap_id==capid)%>%filter(date <= datechk )%>%
rename(y=cpl_views, ds=date)
views_prf <- prophet(cap_views, daily.seasonality='auto', weekly.seasonality='auto', mcmc.samples = 1000,interval.width = 0.80)
views_daily <- make_future_dataframe(views_prf , periods = period_rng,freq="day")
views_daily_forecast <- predict(views_prf, views_daily)
# tail(views_daily_forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
# plot(views_prf, views_daily_forecast)
### Add traffic and views to cpl_leads
leads_cpl<-cap_data_daily%>%
filter(cap_id==capid)%>%filter(date <= datechk )%>%
rename(y=cpl_leads, ds=date)
cpl_prf <- prophet(leads_cpl, daily.seasonality='auto', weekly.seasonality='auto' ,mcmc.samples = 1000,interval.width = 0.80,fit=FALSE,iter=3000)
cpl_daily<-add_regressor(cpl_prf,name='imptrf')
cpl_daily<-add_regressor(cpl_prf,name='cpl_views')
cpl_prf2<- fit.prophet(cpl_daily, leads_cpl)
leads_df <- make_future_dataframe(cpl_prf2, periods = period_rng,freq="day")
# df_all <- leads_df%>%left_join(dplyr::select(trf_daily_forecast,yhat,ds), by = 'ds')%>%rename(imptrf=yhat)
# df_all <- df_all  %>% left_join(dplyr::select(views_daily_forecast, yhat,ds), by = 'ds')%>%rename(cpl_views=yhat)
df_all <- leads_df%>%left_join(dplyr::select(trf_daily_forecast,yhat_lower,ds), by = 'ds')%>%rename(imptrf=yhat_lower)
df_all <- df_all  %>% left_join(dplyr::select(views_daily_forecast, yhat_lower,ds), by = 'ds')%>%rename(cpl_views=yhat_lower)
forecast_cpl <- predict(cpl_prf2, df_all)
# tail(forecast_cpl[c('ds', 'yhat_lower','yhat')])
# plot(cpl_prf2, forecast_cpl)
#
#
#
#
# prophet_plot_components(cpl_prf2, forecast_cpl)
may<-forecast_cpl%>%tail(period_rng)
# return(list(lower_estimate=sum(may$yhat_lower),estimate=sum(may$yhat)))
# price<-pricelist%>%filter(cap_id=='1014')%>%select(accepted_revenue,billable_revenue,revised_revenue)
#
# forcastrev<-sum(may$yhat)*price$billable_revenue
#
return(sum(may$yhat))
}
library(doParallel)
no_cores <- detectCores() - 1
registerDoParallel(cores=no_cores)
cl <- makeCluster(no_cores, type="FORK")
clusterExport(cl,list('cc','cap_data_daily','datechk','period_rng'), envir = environment())
datechk<-'2020-04-30'
period_rng<-31
system.time(forcast_leads <- parLapply(cl,cc$cap_id,pred_forecast,datechk,period_rng))
stopCluster(cl)
### Multiply by CPL
forcast_leads1<-forcast_leads%>%unlist()%>%as.data.frame()%>%rename(forcast= ".")
forcast_leads1<-cbind(forcast_leads1,cc)
pricelist<-trf_daily_clean%>%select(cap_id,accepted_revenue,billable_revenue,revised_revenue,date)%>%filter(date=='2020-04-01' & accepted_revenue>0)%>%distinct()
billable_leadrevenue<-left_join(forcast_leads1,pricelist,by="cap_id")%>%mutate(forcast_billable=forcast*accepted_revenue)%>%filter(!is.na(accepted_revenue))
overall_cap<-trf_daily_clean%>%filter(date<='2020-04-30')%>%mutate(yrmnth=zoo::as.yearmon(date))%>%
group_by(yrmnth,cap_id)%>%
summarise(cpl_leads=sum(accepted_cpl_leads),cpl_views=sum(accepted_cpl_appviews),cpc_clicks=sum(accepted_cpc_clicks),
cpc_leads=sum(accepted_cpc_leads),imptrf=sum(`daily_new$combined_daily.dcs_traffic`))%>%
mutate(yr=year(yrmnth),yrmnth1=yearmonth(yrmnth))%>%
ungroup()%>%filter(!is.na(cap_id))%>%mutate(ctr=(cpl_views/imptrf),cr=(cpl_leads/cpl_views))
capid<-'856'
backtrack_impression<-function(capid)
{
model_data<-overall_cap%>%filter(cap_id==capid)
# knots <- quantile(model_data$imptrf, p = c(0.25, 0.5))
# model_implead<-lm(imptrf~bs(cpl_leads,knots=knots),data=model_data)
model_implead<-lm(imptrf~poly(cpl_leads,2,raw=TRUE),data=model_data)
return(model_implead)
}
library(doParallel)
no_cores <- detectCores() - 1
registerDoParallel(cores=no_cores)
cl <- makeCluster(no_cores, type="FORK")
clusterExport(cl,list('overall_cap'), envir = environment())
system.time(result_implead <- parLapply(cl,cc$cap_id,backtrack_impression))
stopCluster(cl)
View(forcast_leads1)
View(billable_leadrevenue)
699779.60*0.90
699779.60*0.80
699779.60*0.80/260
2153.168*260
result_implead[[1]]
predict(result_ctr[[1]], newdata=data.frame(cpl_leads=cpl_leads.new))
lead.new <- c(2153)
predict(result_implead[[1]], newdata=data.frame(cpl_leads=cpl_leads.new))
cpl_leads.new<- c(2153)
predict(result_ctr[[1]], newdata=data.frame(cpl_leads=cpl_leads.new))
predict(result_implead[[1]], newdata=data.frame(cpl_leads=cpl_leads.new))
View(overall_cap)
nn<-overall_cap%>%filter(cap_id=='856')
View(nn)
redistribute_impression<-function(capid)
{
model_data<-overall_cap%>%filter(cap_id==capid)
# knots <- quantile(model_data$imptrf, p = c(0.25, 0.5))
# model_implead<-lm(imptrf~bs(cpl_leads,knots=knots),data=model_data)
model_lead<-lm(cpl_leads~poly(imptrf,2,raw=TRUE),data=model_data)
return(model_lead)
}
library(doParallel)
no_cores <- detectCores() - 1
registerDoParallel(cores=no_cores)
cl <- makeCluster(no_cores, type="FORK")
clusterExport(cl,list('overall_cap'), envir = environment())
system.time(result_leadimp <- parLapply(cl,cc$cap_id,redistribute_impression_impression))
stopCluster(cl)
library(doParallel)
no_cores <- detectCores() - 1
registerDoParallel(cores=no_cores)
cl <- makeCluster(no_cores, type="FORK")
clusterExport(cl,list('overall_cap'), envir = environment())
system.time(result_leadimp <- parLapply(cl,cc$cap_id,redistribute_impression))
stopCluster(cl)
delta_imp<-predict(result_implead[[1]], newdata=data.frame(cpl_leads=cpl_leads.new))
delta_lead<-predict(result_leadimp[[2]], newdata=data.frame(cpl_leads=delta_imp))
delta_lead<-predict(result_leadimp[[2]], newdata=data.frame(imptrf=delta_imp))
result_implead
result_leadimp[[2]]
caplist<-trf_daily_clean%>%filter(!is.na(cap_id) & date >= '2020-01-01' )%>%dplyr::select(cap_id)%>%distinct()%>%as.data.frame()
cc<-head(caplist,n=666)%>%as.data.frame()
datechk<-'2020-04-30'
period_rng<-31
library(doParallel)
no_cores <- detectCores() - 1
registerDoParallel(cores=no_cores)
cl <- makeCluster(no_cores, type="FORK")
clusterExport(cl,list('cc','cap_data_daily','datechk','period_rng'), envir = environment())
datechk<-'2020-04-30'
period_rng<-31
system.time(result <- parLapply(cl,cc$cap_id,pred_forecast,datechk,period_rng))
stopCluster(cl)
View(overall_cap)
get_views<-function(capid)
{
model_data<-overall_cap%>%filter(cap_id==capid)
# knots <- quantile(model_data$imptrf, p = c(0.25, 0.5))
# model_implead<-lm(imptrf~bs(cpl_leads,knots=knots),data=model_data)
model_getviews<-lm(cpl_views~poly(cpl_leads,2,raw=TRUE),data=model_data)
return(model_lead)
}
get_views<-function(capid)
{
model_data<-overall_cap%>%filter(cap_id==capid)
# knots <- quantile(model_data$imptrf, p = c(0.25, 0.5))
# model_implead<-lm(imptrf~bs(cpl_leads,knots=knots),data=model_data)
model_getviews<-lm(cpl_views~poly(cpl_leads,2,raw=TRUE),data=model_data)
return(model_getviews)
}
get_imp<-function(model_getimp)
{
model_data<-overall_cap%>%filter(cap_id==capid)
# knots <- quantile(model_data$imptrf, p = c(0.25, 0.5))
# model_implead<-lm(imptrf~bs(cpl_leads,knots=knots),data=model_data)
model_getimp<-lm(cpl_imp~poly(cpl_views,2,raw=TRUE),data=model_data)
return(model_lead)
}
caplist<-trf_daily_clean%>%filter(!is.na(cap_id) & date >= '2020-01-01' )%>%dplyr::select(cap_id)%>%distinct()%>%as.data.frame()
cc<-head(caplist,n=5)%>%as.data.frame()
datechk<-'2020-04-30'
period_rng<-31
library(doParallel)
no_cores <- detectCores() - 1
registerDoParallel(cores=no_cores)
cl <- makeCluster(no_cores, type="FORK")
clusterExport(cl,list('cc','cap_data_daily','datechk','period_rng'), envir = environment())
datechk<-'2020-04-30'
period_rng<-31
system.time(forcast_leads <- parLapply(cl,cc$cap_id,pred_forecast,datechk,period_rng))
stopCluster(cl)
View(forcast_leads)
forcast_leads1<-forcast_leads%>%unlist()%>%as.data.frame()%>%rename(forcast= ".")
forcast_leads1<-cbind(forcast_leads1,cc)
pricelist<-trf_daily_clean%>%select(cap_id,accepted_revenue,billable_revenue,revised_revenue,date)%>%filter(date=='2020-04-01' & accepted_revenue>0)%>%distinct()
billable_leadrevenue<-left_join(forcast_leads1,pricelist,by="cap_id")%>%mutate(forcast_billable=forcast*accepted_revenue)%>%filter(!is.na(accepted_revenue))
View(billable_leadrevenue)
inp<-billable_leadrevenue$forcast
inp
get_views<-function(capid)
{
model_data<-overall_cap%>%filter(cap_id==capid)
# knots <- quantile(model_data$imptrf, p = c(0.25, 0.5))
# model_implead<-lm(imptrf~bs(cpl_leads,knots=knots),data=model_data)
model_getviews<-lm(cpl_views~poly(cpl_leads,2,raw=TRUE),data=model_data)
return(model_getviews)
}
get_imp<-function(model_getimp)
{
model_data<-overall_cap%>%filter(cap_id==capid)
# knots <- quantile(model_data$imptrf, p = c(0.25, 0.5))
# model_implead<-lm(imptrf~bs(cpl_leads,knots=knots),data=model_data)
model_getimp<-lm(cpl_imp~poly(cpl_views,2,raw=TRUE),data=model_data)
return(model_lead)
}
library(doParallel)
no_cores <- detectCores() - 1
registerDoParallel(cores=no_cores)
cl <- makeCluster(no_cores, type="FORK")
clusterExport(cl,list('overall_cap'), envir = environment())
system.time(model_getviews <- parLapply(cl,cc$cap_id,get_views))
stopCluster(cl)
no_cores <- detectCores() - 1
registerDoParallel(cores=no_cores)
cl <- makeCluster(no_cores, type="FORK")
clusterExport(cl,list('overall_cap'), envir = environment())
system.time(model_getimp <- parLapply(cl,cc$cap_id,get_impression))
stopCluster(cl)
no_cores <- detectCores() - 1
registerDoParallel(cores=no_cores)
cl <- makeCluster(no_cores, type="FORK")
clusterExport(cl,list('overall_cap'), envir = environment())
system.time(model_getimp <- parLapply(cl,cc$cap_id,get_imp))
stopCluster(cl)
View(overall_cap)
get_views<-function(capid)
{
model_data<-overall_cap%>%filter(cap_id==capid)
# knots <- quantile(model_data$imptrf, p = c(0.25, 0.5))
# model_implead<-lm(imptrf~bs(cpl_leads,knots=knots),data=model_data)
model_getviews<-lm(cpl_views~poly(cpl_leads,2,raw=TRUE),data=model_data)
return(model_getviews)
}
get_imp<-function(model_getimp)
{
model_data<-overall_cap%>%filter(cap_id==capid)
# knots <- quantile(model_data$imptrf, p = c(0.25, 0.5))
# model_implead<-lm(imptrf~bs(cpl_leads,knots=knots),data=model_data)
model_getimp<-lm(imptrf~poly(cpl_views,2,raw=TRUE),data=model_data)
return(model_lead)
}
library(doParallel)
no_cores <- detectCores() - 1
registerDoParallel(cores=no_cores)
cl <- makeCluster(no_cores, type="FORK")
clusterExport(cl,list('overall_cap'), envir = environment())
system.time(model_getviews <- parLapply(cl,cc$cap_id,get_views))
stopCluster(cl)
no_cores <- detectCores() - 1
registerDoParallel(cores=no_cores)
cl <- makeCluster(no_cores, type="FORK")
clusterExport(cl,list('overall_cap'), envir = environment())
system.time(model_getimp <- parLapply(cl,cc$cap_id,get_imp))
stopCluster(cl)
get_views<-function(capid)
{
model_data<-overall_cap%>%filter(cap_id==capid)
# knots <- quantile(model_data$imptrf, p = c(0.25, 0.5))
# model_implead<-lm(imptrf~bs(cpl_leads,knots=knots),data=model_data)
model_getviews<-lm(cpl_views~poly(cpl_leads,2,raw=TRUE),data=model_data)
return(model_getviews)
}
get_imp<-function(model_getimp)
{
model_data<-overall_cap%>%filter(cap_id==capid)
# knots <- quantile(model_data$imptrf, p = c(0.25, 0.5))
# model_implead<-lm(imptrf~bs(cpl_leads,knots=knots),data=model_data)
model_getimp<-lm(imptrf~poly(cpl_views,2,raw=TRUE),data=model_data)
return(model_getimp)
}
library(doParallel)
no_cores <- detectCores() - 1
registerDoParallel(cores=no_cores)
cl <- makeCluster(no_cores, type="FORK")
clusterExport(cl,list('overall_cap'), envir = environment())
system.time(model_getviews <- parLapply(cl,cc$cap_id,get_views))
stopCluster(cl)
no_cores <- detectCores() - 1
registerDoParallel(cores=no_cores)
cl <- makeCluster(no_cores, type="FORK")
clusterExport(cl,list('overall_cap'), envir = environment())
system.time(model_getimp <- parLapply(cl,cc$cap_id,get_imp))
stopCluster(cl)
result_getviews <- apply(inp,get_views)
result_getviews <- apply(inp,get_views())
?apply(array, margin, ...)
result_getviews <- apply(inp,1,get_views)
cpl_leads.new<-billable_leadrevenue$forcast
get_views<-predict(model_getviews , newdata=data.frame(cpl_leads=cpl_leads.new))
predictions <- lapply(cpl_leads.new, function(x){predict(model_getviews, newdata=data.frame(cpl_leads=x))})
dataList <- dlply(cpl_leads.new, "cpl_leads")
require(plyr)
dataList <- dlply(cpl_leads.new, "cpl_leads")
?map2_dbl
mutate(Pred = map2_dbl(model_getviews, 1:5, ~predict(.x, newdata = data.frame(cpl_leads = .y))))
mutate(Pred = map2_dbl(model_getviews, cpl_leads.new, ~predict(.x, newdata = data.frame(cpl_leads = .y))))
cpl_leads.new<-billable_leadrevenue$forcast
delta_imp<-predict(model_getviews[[1]], newdata=data.frame(cpl_leads=cpl_leads.new))
new_data()
new_data
cpl_leads.new<-billable_leadrevenue$forcast[1]
delta_imp<-predict(model_getviews[[1]], newdata=data.frame(cpl_leads=cpl_leads.new))
cpl_leads.new<-billable_leadrevenue$forcast
map2(model_getviews, cpl_leads.new, ~predict(lm(A~B, data=.x), .y,
interval="predict"))
??map2
require(purrr)
map2(model_getviews, cpl_leads.new, ~predict(lm(A~B, data=.x), .y,
interval="predict"))
?map2
map2(model_getviews, cpl_leads.new, ~predict(.x, newdata = .y))
model_getviews
cpl_leads.new
map2(model_getviews, cpl_leads.new, ~predict(.x, newdata = .y))
map2(cpl_leads.new,model_getviews, ~predict(.x, newdata = .y))
map2(model_getviews, cpl_leads.new, ~predict(.x, newdata = .y,interval="predict"))
map2(cpl_leads.new,model_getviews, ~predict(.x, newdata = .y))
cpl_leads.new<-billable_leadrevenue$forcast
newdata=data.frame(cpl_leads=cpl_leads.new)
View(newdata)
map2(model_getviews, newdata, ~predict(.x, newdata = .y))
cpl_leads.new<-billable_leadrevenue$forcast
new=data.frame(cpl_leads=cpl_leads.new)
map2(model_getviews, new, ~predict(.x, newdata = .y))
map2(model_getviews, new, ~predict(.x, newdata = .y), interval="predict")
cpl_leads.new<-billable_leadrevenue$forcast%>%as.list()
map2(model_getviews, cpl_leads.new, ~predict(.x, newdata = .y), interval="predict")
new=data.frame(cpl_leads=cpl_leads.new)
View(new)
View(cpl_leads.new)
cpl_leads.new<-billable_leadrevenue$forcast%>%as.list()
map2(model_getviews, cpl_leads.new, ~predict(.x, newdata = .y), interval="predict")
new=data.frame(cpl_leads=cpl_leads.new)
map2(model_getviews, new, ~predict(.x, newdata = .y), interval="predict")
map2_dbl(model_getviews, new, ~predict(.x, newdata = .y), interval="predict")
map2_dbl(model_getviews, cpl_leads.new, ~predict(.x, newdata = .y), interval="predict")
cpl_leads.new<-billable_leadrevenue$forcast
map2_dbl(model_getviews, cpl_leads.new, ~predict(.x, newdata = .y), interval="predict")
View(newdata)
cpl_leads.new<-billable_leadrevenue$forcast
new=data.frame(cpl_leads=cpl_leads.new)
View(new)
map2_dbl(model_getviews, new, ~predict(.x, newdata = .y), interval="predict")
new=data.frame(cpl_leads=cpl_leads.new)%>%as.list()
map2_dbl(model_getviews, new, ~predict(.x, newdata = .y), interval="predict")
newdata = data.frame(x = c(7,8,9,10)))
newdata = data.frame(x = c(7,8,9,10))
View(newdata)
newdata=data.frame(cpl_leads=billable_leadrevenue$forcast)
map2_dbl(model_getviews, newdata, ~predict(.x, newdata = .y), interval="predict")
View(newdata)
new=data.frame(cpl_leads=billable_leadrevenue$forcast)
map2_dbl(model_getviews, new, ~predict(.x, newdata = .y), interval="predict")
map2_dbl(.x=model_getviews, .y=new, .f= ~predict(.x, newdata = .y, interval="predict"))
map2_dbl(.x=model_getviews, .y=new, .f= ~predict(.x, newdata = .y))
View(new)
model_getviews[[1]]
map2_dbl(.x=model_getviews, .y=new, .f= ~predict(.x, newdata = .y))
map2(.x=model_getviews, .y=new, .f= ~predict(.x, newdata = .y))
new
type_of(new)
new=data.frame(cpl_leads=billable_leadrevenue$forcast)
map2(.x=model_getviews, .y=new, .f= ~predict(.x, newdata = .y))
View(new)
new$cpl_leads
pricelist$cap_id
new=data.frame(cpl_leads=billable_leadrevenue$forcast)
delta_imp<-predict(model_getviews[[1]], new=data.frame(cpl_leads=billable_leadrevenue$forcast))
map2(.x=model_getviews, .y=data.frame(cpl_leads=billable_leadrevenue$forcast), .f= ~predict(.x, newdata = .y))
newdata
map2(.x=model_getviews, .y=new, .f= ~predict(.x, newdata = .y))
View(overall_cap)
View(trf_daily_clean)
overall_cap<-trf_daily_clean%>%filter(date<='2020-04-30')%>%mutate(yrmnth=zoo::as.yearmon(date))%>%
group_by(yrmnth,cap_id)%>%
summarise(cpl_leads=sum(accepted_cpl_leads),cpl_views=sum(accepted_cpl_appviews),cpc_clicks=sum(accepted_cpc_clicks),
cpc_leads=sum(accepted_cpc_leads),imptrf=sum(`daily_new$combined_daily.dcs_traffic`),accepted_revenue=avg(accepted_revenue))%>%
mutate(yr=year(yrmnth),yrmnth1=yearmonth(yrmnth))%>%
ungroup()%>%filter(!is.na(cap_id))%>%mutate(ctr=(cpl_views/imptrf),cr=(cpl_leads/cpl_views))
overall_cap<-trf_daily_clean%>%filter(date<='2020-04-30')%>%mutate(yrmnth=zoo::as.yearmon(date))%>%
group_by(yrmnth,cap_id)%>%
summarise(cpl_leads=sum(accepted_cpl_leads),cpl_views=sum(accepted_cpl_appviews),cpc_clicks=sum(accepted_cpc_clicks),
cpc_leads=sum(accepted_cpc_leads),imptrf=sum(`daily_new$combined_daily.dcs_traffic`),accepted_revenue=mean(accepted_revenue))%>%
mutate(yr=year(yrmnth),yrmnth1=yearmonth(yrmnth))%>%
ungroup()%>%filter(!is.na(cap_id))%>%mutate(ctr=(cpl_views/imptrf),cr=(cpl_leads/cpl_views))
require(lubridate)
overall_cap<-trf_daily_clean%>%filter(date<='2020-04-30')%>%mutate(yrmnth=zoo::as.yearmon(date))%>%
group_by(yrmnth,cap_id)%>%
summarise(cpl_leads=sum(accepted_cpl_leads),cpl_views=sum(accepted_cpl_appviews),cpc_clicks=sum(accepted_cpc_clicks),
cpc_leads=sum(accepted_cpc_leads),imptrf=sum(`daily_new$combined_daily.dcs_traffic`),accepted_revenue=mean(accepted_revenue))%>%
mutate(yr=year(yrmnth),yrmnth1=yearmonth(yrmnth))%>%
ungroup()%>%filter(!is.na(cap_id))%>%mutate(ctr=(cpl_views/imptrf),cr=(cpl_leads/cpl_views))
overall_cap<-trf_daily_clean%>%filter(date<='2020-04-30')%>%mutate(yrmnth=zoo::as.yearmon(date))%>%
group_by(yrmnth,cap_id)%>%
summarise(cpl_leads=sum(accepted_cpl_leads),cpl_views=sum(accepted_cpl_appviews),cpc_clicks=sum(accepted_cpc_clicks),
cpc_leads=sum(accepted_cpc_leads),imptrf=sum(`daily_new$combined_daily.dcs_traffic`),accepted_revenue=mean(accepted_revenue))
View(overall_cap)
require(zoo)
overall_cap<-trf_daily_clean%>%filter(date<='2020-04-30')%>%mutate(yrmnth=zoo::as.yearmon(date))%>%
group_by(yrmnth,cap_id)%>%
summarise(cpl_leads=sum(accepted_cpl_leads),cpl_views=sum(accepted_cpl_appviews),cpc_clicks=sum(accepted_cpc_clicks),
cpc_leads=sum(accepted_cpc_leads),imptrf=sum(`daily_new$combined_daily.dcs_traffic`),accepted_revenue=mean(accepted_revenue))%>%
mutate(yr=year(yrmnth),yrmnth1=yearmonth(yrmnth))%>%
ungroup()%>%filter(!is.na(cap_id))%>%mutate(ctr=(cpl_views/imptrf),cr=(cpl_leads/cpl_views))
overall_cap<-trf_daily_clean%>%filter(date<='2020-04-30')%>%mutate(yrmnth=zoo::as.yearmon(date))
View(overall_cap)
overall_cap<-trf_daily_clean%>%filter(date<='2020-04-30')%>%mutate(yrmnth=zoo::as.yearmon(date))%>%
group_by(yrmnth,cap_id)%>%
summarise(cpl_leads=sum(accepted_cpl_leads),cpl_views=sum(accepted_cpl_appviews),cpc_clicks=sum(accepted_cpc_clicks),
cpc_leads=sum(accepted_cpc_leads),imptrf=sum(`daily_new$combined_daily.dcs_traffic`),accepted_revenue=mean(accepted_revenue))%>%
mutate(yr=year(yrmnth),yrmnth1=yearmonth(yrmnth))%>%
ungroup()%>%filter(!is.na(cap_id))%>%mutate(ctr=(cpl_views/imptrf),cr=(cpl_leads/cpl_views))
overall_cap<-trf_daily_clean%>%filter(date<='2020-04-30')%>%mutate(yrmnth=zoo::as.yearmon(date))%>%
group_by(yrmnth,cap_id)%>%
summarise(cpl_leads=sum(accepted_cpl_leads),cpl_views=sum(accepted_cpl_appviews),cpc_clicks=sum(accepted_cpc_clicks),
cpc_leads=sum(accepted_cpc_leads),imptrf=sum(`daily_new$combined_daily.dcs_traffic`),accepted_revenue=mean(accepted_revenue))%>%
#  mutate(yr=year(yrmnth),yrmnth1=yearmonth(yrmnth))%>%
ungroup()%>%filter(!is.na(cap_id))%>%mutate(ctr=(cpl_views/imptrf),cr=(cpl_leads/cpl_views))
require(zoo)
overall_cap<-trf_daily_clean%>%filter(date<='2020-04-30')%>%mutate(yrmnth=zoo::as.yearmon(date))%>%
group_by(yrmnth,cap_id)%>%
summarise(cpl_leads=sum(accepted_cpl_leads),cpl_views=sum(accepted_cpl_appviews),cpc_clicks=sum(accepted_cpc_clicks),
cpc_leads=sum(accepted_cpc_leads),imptrf=sum(`daily_new$combined_daily.dcs_traffic`),accepted_revenue=mean(accepted_revenue))%>%
mutate(yr=year(yrmnth),yrmnth1=yearmonth(yrmnth))%>%
ungroup()%>%filter(!is.na(cap_id))%>%mutate(ctr=(cpl_views/imptrf),cr=(cpl_leads/cpl_views))
trf_daily_final<-readRDS('trf_daily_final.RDS')
trf_daily_clean<-trf_daily_final%>%mutate_at(c(12,14,16), ~replace(., is.na(.), 0))
overall_cap<-trf_daily_clean%>%filter(date<='2020-04-30')%>%mutate(yrmnth=zoo::as.yearmon(date))%>%
group_by(yrmnth,cap_id)%>%
summarise(cpl_leads=sum(accepted_cpl_leads),cpl_views=sum(accepted_cpl_appviews),cpc_clicks=sum(accepted_cpc_clicks),
cpc_leads=sum(accepted_cpc_leads),imptrf=sum(`daily_new$combined_daily.dcs_traffic`),accepted_revenue=mean(accepted_revenue))%>%
mutate(yr=year(yrmnth),yrmnth1=yearmonth(yrmnth))%>%
ungroup()%>%filter(!is.na(cap_id))%>%mutate(ctr=(cpl_views/imptrf),cr=(cpl_leads/cpl_views))
overall_cap<-trf_daily_clean%>%filter(date<='2020-04-30')%>%mutate(yrmnth=zoo::as.yearmon(date))
View(overall_cap)
overall_cap<-trf_daily_clean%>%filter(date<='2020-04-30')%>%mutate(yrmnth=zoo::as.yearmon(date))%>%
group_by(yrmnth,cap_id)%>%
summarise(cpl_leads=sum(accepted_cpl_leads),cpl_views=sum(accepted_cpl_appviews),cpc_clicks=sum(accepted_cpc_clicks),
cpc_leads=sum(accepted_cpc_leads),imptrf=sum(`daily_new$combined_daily.dcs_traffic`),accepted_revenue=mean(accepted_revenue))
View(overall_cap)
require(zoo)
require(lubridate)
overall_cap<-trf_daily_clean%>%filter(date<='2020-04-30')%>%mutate(yrmnth=zoo::as.yearmon(date))%>%
group_by(yrmnth,cap_id)%>%
summarise(cpl_leads=sum(accepted_cpl_leads),cpl_views=sum(accepted_cpl_appviews),cpc_clicks=sum(accepted_cpc_clicks),
cpc_leads=sum(accepted_cpc_leads),imptrf=sum(`daily_new$combined_daily.dcs_traffic`),accepted_revenue=mean(accepted_revenue))
zoo::as.Date.yearmon()
zoo::as.Date.yearmon(trf_daily_clean$date[1])
zoo::as.Date.yearmon(trf_daily_clean$date)
trf_daily_final<-readRDS('trf_daily_final.RDS')
trf_daily_clean<-trf_daily_final%>%mutate_at(c(12,14,16), ~replace(., is.na(.), 0))
cap_data_daily<-trf_daily_clean%>%dplyr::select(cap_id, school_name,date,accepted_cpl_leads,accepted_cpl_appviews,accepted_cpc_clicks,accepted_cpc_leads,
accepted_revenue,billable_revenue,revised_revenue,
`daily_new$combined_daily.dcs_traffic`)%>%
filter(date <= '2020-04-30' )%>%group_by(cap_id, school_name,date)%>%
summarize(cpl_leads=sum(accepted_cpl_leads),cpl_views=sum(accepted_cpl_appviews),cpc_clicks=sum(accepted_cpc_clicks),
cpc_leads=sum(accepted_cpc_leads),imptrf=sum(`daily_new$combined_daily.dcs_traffic`))%>%filter(!is.na(cap_id))
pricelist<-trf_daily_clean%>%select(cap_id,accepted_revenue,billable_revenue,revised_revenue,date)%>%filter(date=='2020-04-01' & accepted_revenue>0)%>%distinct()
trf_daily_final<-readRDS('trf_daily_final.RDS')
trf_daily_clean<-trf_daily_final%>%mutate_at(c(12,14,16), ~replace(., is.na(.), 0))
cap_data_daily<-trf_daily_clean%>%dplyr::select(cap_id, school_name,date,accepted_cpl_leads,accepted_cpl_appviews,accepted_cpc_clicks,accepted_cpc_leads,
accepted_revenue,billable_revenue,revised_revenue,
`daily_new$combined_daily.dcs_traffic`)%>%
filter(date <= '2020-04-30' )%>%group_by(cap_id, school_name,date)%>%
summarize(cpl_leads=sum(accepted_cpl_leads),cpl_views=sum(accepted_cpl_appviews),cpc_clicks=sum(accepted_cpc_clicks),
cpc_leads=sum(accepted_cpc_leads),imptrf=sum(`daily_new$combined_daily.dcs_traffic`))%>%filter(!is.na(cap_id))
pricelist<-trf_daily_clean%>%select(cap_id,accepted_revenue,billable_revenue,revised_revenue,date)%>%filter(date=='2020-04-01' & accepted_revenue>0)%>%distinct()
cap_data_daily<-trf_daily_clean%>%dplyr::select(cap_id, school_name,date,accepted_cpl_leads,accepted_cpl_appviews,accepted_cpc_clicks,accepted_cpc_leads,
accepted_revenue,billable_revenue,revised_revenue,
`daily_new$combined_daily.dcs_traffic`)%>%
filter(date <= '2020-04-30' )%>%group_by(cap_id, school_name,date)%>%
summarize(cpl_leads=sum(accepted_cpl_leads),cpl_views=sum(accepted_cpl_appviews),cpc_clicks=sum(accepted_cpc_clicks),
cpc_leads=sum(accepted_cpc_leads),imptrf=sum(`daily_new$combined_daily.dcs_traffic`))%>%filter(!is.na(cap_id))
View(trf_daily_clean)
cap_data_daily<-trf_daily_clean%>%dplyr::select(cap_id, school_name,date,accepted_cpl_leads,accepted_cpl_appviews,accepted_cpc_clicks,accepted_cpc_leads,
accepted_revenue,billable_revenue,revised_revenue,
`daily_new$combined_daily.dcs_traffic`)%>%
filter(date <= '2020-04-30' )%>%group_by(cap_id, school_name,date)%>%
summarize(cpl_leads=sum(accepted_cpl_leads),cpl_views=sum(accepted_cpl_appviews),cpc_clicks=sum(accepted_cpc_clicks),
cpc_leads=sum(accepted_cpc_leads),imptrf=sum(`daily_new$combined_daily.dcs_traffic`))
cap_data_daily<-cap_data_daily%>%filter(!is.na(cap_id))
